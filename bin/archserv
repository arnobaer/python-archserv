#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pprint import pprint
import archserv
import argparse
import geojson
import sys, os

CRS_M34 = "urn:ogc:def:crs:EPSG::31256" # Austria M34 East
CRS_M31 = "urn:ogc:def:crs:EPSG::31255" # Austria M31 Central
CRS_M28 = "urn:ogc:def:crs:EPSG::31254" # Austria M28 West

DEFAULT_CRS = CRS_M34

ALL_CRS = {
    "Austria M34 East": CRS_M34,
    "Austria M31 Central": CRS_M31,
    "Austria M28 West": CRS_M28,
}


def writable_t(filename):
    """Checks for writable target location."""
    if os.path.exists(filename):
        if not os.access(filename, os.W_OK):
            raise IOError("not writable: {0}".format(filename))
    else:
        if not os.access(os.path.dirname(filename) or os.getcwd(), os.W_OK):
            raise IOError("not writable: {0}".format(filename))
    return filename


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    parser.add_argument("--crs", default=DEFAULT_CRS, help="CRS code, default is {}".format(DEFAULT_CRS))
    parser.add_argument("--list-crs", action="store_true", help="list available CRS")
    parser.add_argument("--export-geojson", metavar="<dir>", type=writable_t, help="export to GeoJSON directory")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose messages")
    return parser.parse_args()


def export_geojson(features, dirname, crs):
    os.makedirs(dirname)
    for key, groups in features.items():
        #
        # build geojson
        #
        features = []
        for group in sorted(groups.keys()):
            points = groups[group]
            if not points:
                continue
            first = points[0]
            # Polygons
            if first.key.code in archserv.PolygonTypes:
                geometries = [point.xyz for point in points] + [first.xyz] # close the polygon!
                features.append(geojson.Feature(
                    geometry=geojson.Polygon([geometries]),
                    properties=dict(context=first.key.context, group=first.key.group, type=first.key.code, code=first.code)
                ))
            # Lines
            elif first.key.code in archserv.LineTypes:
                geometries = [point.xyz for point in points]
                features.append(geojson.Feature(
                    geometry=geojson.LineString(geometries),
                    properties=dict(context=first.key.context, group=first.key.group, type=first.key.code, code=first.code)
                ))
            # Points
            elif first.key.code in archserv.PointTypes:
                codename = first.code
                for point in points:
                    features.append(geojson.Feature(
                        geometry=geojson.Point(point.xyz),
                        properties=dict(context=first.key.context, group=first.key.group, type=first.key.code, height=first.z, code=first.code)
                    ))
            else:
                for point in points:
                    print("ERROR:", point)
        if not features:
            continue # Just in case prevent creating an empty layer
        collection = geojson.FeatureCollection(
            features,
            crs=dict(type="name", properties=dict(name=crs))
        )
        # geojson.dumps(collection) # debug
        #
        # Write to file
        #
        context, code = key
        path = os.path.join(dirname, "{0:04d}".format(context))
        if not os.path.exists(path):
            os.makedirs(path)
        filename = os.path.join(path, "SE{0:04d}_{1:02d}.geojson".format(context, code))
        with open(filename, "w") as fp:
            geojson.dump(collection, fp)


def main():
    args = parse_args()

    if args.list_crs:
        for name, code in ALL_CRS.items():
            sys.stdout.write("{}: {}{}".format(name, code, os.linesep))
        return 0

    parser = archserv.ArchServ()

    # Read from file
    with open(args.filename, "r") as fp:
        parser.read(fp)

    features = parser.features()

    if args.verbose:
        pprint(features)

    if args.export_geojson:
        export_geojson(features, args.export_geojson, args.crs)

    return 0

if __name__ == "__main__":
    sys.exit(main())
